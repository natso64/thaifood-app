import streamlit as st
import pandas as pd
import numpy as np
import os
import re
from typing import Dict
from datetime import datetime

from functions.data import load_food_data
from functions.search import (
    load_model, get_embeddings, get_ingredient_embeddings, search_recipes, SENTENCE_TRANSFORMERS_AVAILABLE, SKLEARN_AVAILABLE
)
from functions.nutrition import SimpleNutritionCalculator
from functions.ui import display_ingredients, display_nutrition_card

"""
Streamlit Thai Food Nutrition Analyzer
Refactored to organize related functions under `functions/` and templates under `templates/`.
"""

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="Thai Food Nutrition Analyzer",
    page_icon="üç≤",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Load fonts and styles from templates
try:
    with open("templates/fonts.html", "r", encoding="utf-8") as f:
        st.markdown(f.read(), unsafe_allow_html=True)
except Exception:
    pass
try:
    with open("templates/styles.css", "r", encoding="utf-8") as f:
        st.markdown(f"""
<style>
        {f.read()}
</style>
""", unsafe_allow_html=True)
except Exception:
    pass

NUTRITION_PATH = "thai_ingredients_nutrition_data.csv"


def create_sample_data():
    sample = {
        'name': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢', '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡πÑ‡∏Å‡πà', '‡∏™‡πâ‡∏°‡∏ï‡∏≥', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î'],
        'ingredient': [
            '- ‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î 200 ‡∏Å‡∏£‡∏±‡∏°\n- ‡πÄ‡∏´‡πá‡∏î‡∏ü‡∏≤‡∏á 100 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏°‡∏∞‡∏ô‡∏≤‡∏ß 2 ‡∏•‡∏π‡∏Å\n- ‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π 3 ‡πÄ‡∏°‡πá‡∏î\n- ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ 2 ‡∏ï‡πâ‡∏ô',
            '- ‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏°‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á 200 ‡∏Å‡∏£‡∏±‡∏°\n- ‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà 2 ‡∏ü‡∏≠‡∏á\n- ‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å 100 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏´‡πâ‡∏á 2 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞\n- ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏õ‡∏µ‡πä‡∏ö 2 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞',
            '- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡πà 300 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏õ‡∏£‡∏≤‡∏∞ 3 ‡∏•‡∏π‡∏Å\n- ‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î 3 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞\n- ‡∏Å‡∏∞‡∏ó‡∏¥ 400 ‡∏°‡∏•.\n- ‡πÉ‡∏ö‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤',
            '- ‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠‡∏î‡∏¥‡∏ö 300 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏® 2 ‡∏•‡∏π‡∏Å\n- ‡∏ñ‡∏±‡πà‡∏ß‡∏ù‡∏±‡∏Å‡∏¢‡∏≤‡∏ß 50 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏´‡πâ‡∏á 1 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞\n- ‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π 5 ‡πÄ‡∏°‡πá‡∏î',
            '- ‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢ 2 ‡∏ñ‡πâ‡∏ß‡∏¢\n- ‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà 2 ‡∏ü‡∏≠‡∏á\n- ‡∏´‡∏°‡∏π‡∏´‡∏±‡πà‡∏ô‡πÄ‡∏ï‡πá‡∏° 100 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏≠‡πà‡∏≠‡∏ô 50 ‡∏Å‡∏£‡∏±‡∏°\n- ‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà 1 ‡∏´‡∏±‡∏ß'
        ],
        'method': [
            '‡∏ï‡πâ‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏î ‡πÉ‡∏™‡πà‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ ‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏î ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏¥‡∏Å',
            '‡πÅ‡∏ä‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏°‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡πà‡∏° ‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å ‡πÉ‡∏™‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏°‡∏µ‡πà‡∏•‡∏á‡∏ú‡∏±‡∏î ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å', 
            '‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏∞‡∏ó‡∏¥‡πÉ‡∏´‡πâ‡∏´‡∏≠‡∏° ‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡πà ‡πÉ‡∏™‡πà‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠ ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ö‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤',
            '‡πÇ‡∏Ç‡∏•‡∏Å‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π‡∏Å‡∏±‡∏ö‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏´‡πâ‡∏á ‡πÉ‡∏™‡πà‡∏°‡∏∞‡∏•‡∏∞‡∏Å‡∏≠‡∏ï‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÅ‡∏´‡∏•‡∏Å ‡πÉ‡∏™‡πà‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ñ‡∏±‡πà‡∏ß‡∏ù‡∏±‡∏Å‡∏¢‡∏≤‡∏ß ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™',
            '‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏∞‡∏ó‡∏∞‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å ‡πÉ‡∏™‡πà‡∏´‡∏°‡∏π‡∏ú‡∏±‡∏î‡∏à‡∏ô‡∏™‡∏∏‡∏Å ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î ‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏™‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö'
        ]
    }
    return pd.DataFrame(sample)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def main():
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö..."):
        model = load_model()
        data = load_food_data()
        
        if data.empty:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ")
            return
        
        embeddings = get_embeddings(model, data)
        ingredient_embeddings = get_ingredient_embeddings(model, data)
        nutrition_calculator = SimpleNutritionCalculator()
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡πâ‡∏ß)
    mode_indicator = "ü§ñ AI Enhanced" if SENTENCE_TRANSFORMERS_AVAILABLE and model else "üîç Basic Mode"
    
    st.markdown(f"""
    <div class="main-header">
        <h1>üç≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢</h1>
        <p>Thai Food Nutrition Analyzer - {mode_indicator}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        st.markdown("### üñ•Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
        if SENTENCE_TRANSFORMERS_AVAILABLE and model:
            st.success("ü§ñ AI Search: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            st.warning("üîç Basic Search: ‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        
        if SKLEARN_AVAILABLE:
            st.success("üìä ML Tools: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            st.info("üìä ML Tools: ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡πÅ‡∏ó‡∏ô")
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        st.markdown("### üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        search_mode = st.selectbox(
            "‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
            ["‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "Fuzzy Search ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"] if not SENTENCE_TRANSFORMERS_AVAILABLE 
            else ["‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "AI Search ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", "Fuzzy Search ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"],
            help="‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ = ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ"
        )
        
        max_results = st.slider(
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
            1,
            int(max(1, len(data))),
            int(max(1, len(data)))
        )
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        st.markdown("### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£", len(data))
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI features
        if not SENTENCE_TRANSFORMERS_AVAILABLE:
            st.markdown("### üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° AI Features")
            st.info("""
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå AI ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
            ```
            pip install sentence-transformers
            pip install scikit-learn
            ```
            """)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        with st.expander("üîß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", icon="‚ñ™Ô∏è"):
            st.write(f"**Sentence Transformers:** {'‚úÖ' if SENTENCE_TRANSFORMERS_AVAILABLE else '‚ùå'}")
            st.write(f"**Scikit-learn:** {'‚úÖ' if SKLEARN_AVAILABLE else '‚ùå'}")
            st.write(f"**‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:** {'AI + Fuzzy' if model else 'Fuzzy Only'}")
            st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î Embeddings:** {len(embeddings) if len(embeddings) > 0 else 'N/A'}")
    
    # ‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
    tab1, tab2, tab3 = st.tabs(["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"])
    
    with tab1:
        st.markdown("## ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        st.markdown("""
        <div class="search-tips">
            <h4>üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</h4>
            <ul>
                <li><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£:</strong> ‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á, ‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢, ‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î</li>
                <li><strong>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö:</strong> ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏∏‡πâ‡∏á, ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏Å‡πà</li>
                <li><strong>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î:</strong> ‡∏ú‡∏±‡∏î‡πÉ‡∏ó ‚Üí ‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢</li>
                <li><strong>‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©:</strong> tom yum, pad thai</li>
            </ul>
            """ + (f"""
            <div style="background: #e3f2fd; padding: 0.5rem; margin-top: 0.5rem; border-radius: 5px;">
                <strong>‚ÑπÔ∏è ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</strong> {'AI + Fuzzy Search' if model and SENTENCE_TRANSFORMERS_AVAILABLE else 'Fuzzy Search (Basic)'}
            </div>
            """ if not SENTENCE_TRANSFORMERS_AVAILABLE else "") + """
        </div>
        """, unsafe_allow_html=True)
        
        # ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        query = st.text_input(
            "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:",
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á, ‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á...",
            help="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
        )
        
        if query:
            with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{query}'..."):
                results = search_recipes(query, model, data, embeddings, ingredient_embeddings, max_results)
            
            if results:
                filtered_results = [r for r in results if r.get('similarity', 0) >= 0.5]
                st.markdown(f"### üçΩÔ∏è ‡∏û‡∏ö {len(filtered_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50%)")
                
                for i, result in enumerate(filtered_results, 1):
                    label = f"{i}. {result['name']} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: {result['similarity']:.1%})"
                    similarity_class = "low-similarity" if result['similarity'] < 0.5 else ""
                    with st.expander(label, icon="‚ñ™Ô∏è"):
                        st.markdown("""
                        <div class="recipe-card">
                            <h4 style="margin-top: 0;">üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h4>
                        </div>
                        """, unsafe_allow_html=True)
                        display_ingredients(result.get('ingredients', ''))

                        st.markdown("### üë®‚Äçüç≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥")
                        method_text = result.get('method', '')
                        if method_text:
                            method_text = method_text.replace('. ', '.\n\n')
                            st.markdown(f"""
                            <div class=\"recipe-card\" style=\"background: #f8f9fa; border-left: 4px solid #17a2b8;\">
                                {method_text}
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥")

                        if st.button("‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", key=f"nutri_{result['index']}"):
                            nutrition_data = nutrition_calculator.calculate_recipe_nutrition(
                                result.get('ingredients', '')
                            )
                            display_nutrition_card(nutrition_data)
                        
                        if st.button("‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", key=f"compare_{result['index']}"):
                            ingredients_text = result.get('ingredients', '')
                            rows = []
                            if ingredients_text:
                                lines = [line.strip() for line in ingredients_text.split('\n') if line.strip()]
                                for line in lines:
                                    clean_line = re.sub(r'^[-‚Ä¢*]\s*', '', line)
                                    if not clean_line:
                                        continue
                                    amount_g = nutrition_calculator.estimate_ingredient_amount(clean_line)
                                    per100 = nutrition_calculator.find_nutrition_match(clean_line)
                                    factor = amount_g / 100.0 if amount_g else 0
                                    rows.append({
                                        '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö': clean_line,
                                        '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì (g)': float(amount_g),
                                        '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)': float(per100.get('calories', 0) * factor),
                                        '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)': float(per100.get('protein', 0) * factor),
                                        '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)': float(per100.get('fat', 0) * factor),
                                        '‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g)': float(per100.get('carbs', 0) * factor)
                                    })
                            if rows:
                                df_compare = pd.DataFrame(rows)
                                # ‡∏£‡∏ß‡∏°‡∏ó‡πâ‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                                totals = {
                                    '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö': '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                                    '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì (g)': df_compare['‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì (g)'].sum(),
                                    '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)': df_compare['‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)'].sum(),
                                    '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)': df_compare['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)'].sum(),
                                    '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)': df_compare['‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)'].sum(),
                                    '‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g)': df_compare['‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (g)'].sum()
                                }
                                df_compare = pd.concat([df_compare, pd.DataFrame([totals])], ignore_index=True)
                                st.dataframe(df_compare.round(2), use_container_width=True, hide_index=True)
                            else:
                                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
                
            else:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{query}'")
                st.info("""
                üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:**
                - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏Å‡∏∏‡πâ‡∏á' ‡πÅ‡∏ó‡∏ô '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á'
                - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥
                - ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                """)
    
    with tab2:
        st.markdown("## üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        col1, col2, col3 = st.columns(3)
        
        with col1:
            name_filter = st.text_input("üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠:", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£...")
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filtered_data = data.copy()
        
        if name_filter:
            filtered_data = filtered_data[
                filtered_data['name'].str.contains(name_filter, case=False, na=False)
            ]
        
        st.markdown(f"**‡∏û‡∏ö {len(filtered_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£** (‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        if not filtered_data.empty:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£..."):
                nutrition_summary = []
                for _, row in filtered_data.head(50).iterrows():  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
                    nutrition = nutrition_calculator.calculate_recipe_nutrition(
                        row.get('ingredient', ''))
                    nutrition_summary.append(nutrition)
                
                filtered_data_display = filtered_data.head(50).copy()
                filtered_data_display['‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)'] = [n.get('calories', 0) for n in nutrition_summary]
                filtered_data_display['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)'] = [n.get('protein', 0) for n in nutrition_summary]
                filtered_data_display['‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)'] = [n.get('fat', 0) for n in nutrition_summary]
                filtered_data_display['‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏´‡∏î‡πÄ‡∏£‡∏ï (g)'] = [n.get('carbs', 0) for n in nutrition_summary]
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            st.dataframe(
                filtered_data_display[['name', '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)', '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (g)', '‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏´‡∏î‡πÄ‡∏£‡∏ï (g)']].round(1),
                use_container_width=True,
                hide_index=True
            )
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
            if len(nutrition_summary) > 0:
                st.markdown("### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ")
                col1, col2, col3, col4 = st.columns(4)
                
                avg_calories = np.mean([n.get('calories', 0) for n in nutrition_summary])
                avg_protein = np.mean([n.get('protein', 0) for n in nutrition_summary])
                avg_fat = np.mean([n.get('fat', 0) for n in nutrition_summary])
                avg_carbs = np.mean([n.get('carbs', 0) for n in nutrition_summary])
                
                with col1:
                    st.metric("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_calories:.0f} kcal")
                with col2:
                    st.metric("‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_protein:.1f} g")
                with col3:
                    st.metric("‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_fat:.1f} g")
                with col4:
                    st.metric("‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_carbs:.1f} g")
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á")
    
    with tab3:
        st.markdown("## ‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            ### üî¨ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            
            - **AI Search**: {'‚úÖ Sentence Transformers' if SENTENCE_TRANSFORMERS_AVAILABLE else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
            - **‡πÇ‡∏°‡πÄ‡∏î‡∏•**: {'paraphrase-multilingual-MiniLM-L12-v2' if model else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î'}
            - **‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤**: {'Semantic + Fuzzy Matching' if SENTENCE_TRANSFORMERS_AVAILABLE else 'Fuzzy Matching Only'}
            - **ML Tools**: {'‚úÖ Scikit-learn' if SKLEARN_AVAILABLE else '‚ùå ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡πÅ‡∏ó‡∏ô'}
            - **UI Framework**: ‚úÖ Streamlit
            - **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°
            
            ### üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
            - {'ü§ñ' if SENTENCE_TRANSFORMERS_AVAILABLE else 'üîç'} ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£{'‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢' if SENTENCE_TRANSFORMERS_AVAILABLE else '‡πÅ‡∏ö‡∏ö Fuzzy Matching'}
            - ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î
            - ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            - ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            - ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            """)
            
            if not SENTENCE_TRANSFORMERS_AVAILABLE:
                st.warning("""
                **üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå AI:**
                
                ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AI Search ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:
                ```bash
                pip install sentence-transformers
                pip install scikit-learn torch
                ```
                """)
        
        with col2:
            st.markdown(f"""
            ### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            
            - **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£**: {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            - **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ
            - **‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£**: ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            - **‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**: {'AI + Basic' if SENTENCE_TRANSFORMERS_AVAILABLE else 'Basic Only'}
            
            ### ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
            
            - ‡∏Ñ‡πà‡∏≤‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            - {'‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ AI ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Sentence Transformers' if not SENTENCE_TRANSFORMERS_AVAILABLE else '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û'}
            - ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
            
            ### üîÑ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
            
            - **‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**: {'2.0 Enhanced (Basic Mode)' if not SENTENCE_TRANSFORMERS_AVAILABLE else '2.0 Enhanced (Full AI)'}
            - **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î**: {datetime.now().strftime("%d/%m/%Y")}
            """)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        st.markdown("### üöÄ ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠")
        
        if not SENTENCE_TRANSFORMERS_AVAILABLE:
            st.info("""
            **üì± ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: Basic Mode**
            
            ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Fuzzy Search ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ
            
            **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:**
            - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö Fuzzy Matching
            - ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î
            - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
            - ‚úÖ UI ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            
            **‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ AI Features:**
            - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á sentence-transformers
            - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á scikit-learn
            - ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ
            """)
        else:
            st.success("""
            **ü§ñ ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: AI Enhanced**
            
            ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI Search
            
            **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
            - ‚úÖ Semantic Search ‡∏î‡πâ‡∏ß‡∏¢ AI
            - ‚úÖ Fuzzy Search ‡∏™‡∏≥‡∏£‡∏≠‡∏á
            - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
            - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            """)

if __name__ == "__main__":
    main()
